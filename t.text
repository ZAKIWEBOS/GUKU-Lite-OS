// Ultimate Protection Script - Full Security System
(function() {
    'use strict';
    
    // Protection state
    let protectionActive = true;
    let originalConsole = {};
    
    // Store original console methods before disabling
    if (typeof console !== 'undefined') {
        originalConsole = {
            log: console.log,
            warn: console.warn,
            error: console.error,
            info: console.info,
            debug: console.debug,
            trace: console.trace,
            dir: console.dir,
            dirxml: console.dirxml,
            table: console.table,
            group: console.group,
            groupEnd: console.groupEnd,
            clear: console.clear
        };
    }

    // Master Protection Object
    const UltimateProtection = {
        
        // Disable ALL keyboard shortcuts
        disableAllShortcuts: function() {
            document.addEventListener('keydown', function(e) {
                // F-keys
                if (e.key.startsWith('F') && e.key.length > 1) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
                
                // Ctrl combinations
                if (e.ctrlKey) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
                
                // Alt combinations
                if (e.altKey) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
                
                // Shift combinations with special keys
                if (e.shiftKey && (e.key === 'Tab' || e.key === 'Delete' || e.key === 'Insert')) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
                
                // Windows/Command key
                if (e.metaKey) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
                
                // Special keys
                const blockedKeys = ['PrintScreen', 'Insert', 'Delete', 'Home', 'End', 'PageUp', 'PageDown'];
                if (blockedKeys.includes(e.key)) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
                
            }, true);
            
            // Disable keyup events too
            document.addEventListener('keyup', function(e) {
                if (e.ctrlKey || e.altKey || e.metaKey || e.key.startsWith('F')) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
            }, true);
        },

        // Disable right-click and context menu
        disableRightClick: function() {
            document.addEventListener('contextmenu', function(e) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }, true);
            
            document.addEventListener('mousedown', function(e) {
                if (e.button === 2) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
            }, true);
            
            document.addEventListener('mouseup', function(e) {
                if (e.button === 2) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
            }, true);
        },

        // Disable text selection and drag
        disableSelection: function() {
            // CSS method
            const style = document.createElement('style');
            style.innerHTML = `
                * {
                    -webkit-user-select: none !important;
                    -moz-user-select: none !important;
                    -ms-user-select: none !important;
                    user-select: none !important;
                    -webkit-touch-callout: none !important;
                    -webkit-tap-highlight-color: transparent !important;
                }
            `;
            document.head.appendChild(style);
            
            // JavaScript events
            document.addEventListener('selectstart', function(e) {
                e.preventDefault();
                return false;
            }, true);
            
            document.addEventListener('dragstart', function(e) {
                e.preventDefault();
                return false;
            }, true);
            
            document.addEventListener('drop', function(e) {
                e.preventDefault();
                return false;
            }, true);
            
            document.addEventListener('dragover', function(e) {
                e.preventDefault();
                return false;
            }, true);
        },

        // Completely disable console
        disableConsole: function() {
            if (typeof console !== 'undefined') {
                console.log = console.warn = console.error = console.info = 
                console.debug = console.trace = console.dir = console.dirxml = 
                console.table = console.group = console.groupEnd = console.clear = 
                console.count = console.countReset = console.time = console.timeEnd = 
                console.timeLog = console.assert = console.profile = console.profileEnd = 
                function() {};
                
                // Freeze console object
                Object.freeze(console);
            }
            
            // Override global console
            window.console = undefined;
            delete window.console;
        },

        // Hide browser developer tools and extensions
        hideBrowserTools: function() {
            // Hide browser menu (three dots)
            document.addEventListener('keydown', function(e) {
                // Alt + F (Firefox menu)
                // Alt + E (Edge menu)
                // Alt + H (Help menu)
                // Alt + T (Tools menu)
                // Alt + V (View menu)
                if (e.altKey && ['F', 'E', 'H', 'T', 'V', 'B', 'S', 'G'].includes(e.key.toUpperCase())) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
            }, true);
            
            // Block extension shortcuts
            const extensionShortcuts = [
                'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'
            ];
            
            document.addEventListener('keydown', function(e) {
                if (extensionShortcuts.includes(e.key)) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
            }, true);
        },

        // Advanced developer tools detection
        detectDevTools: function() {
            let devtools = {open: false};
            
            // Method 1: Screen size detection
            setInterval(function() {
                const widthThreshold = window.screen.availWidth - window.innerWidth > 200;
                const heightThreshold = window.screen.availHeight - window.innerHeight > 200;
                
                if (widthThreshold || heightThreshold) {
                    if (!devtools.open) {
                        devtools.open = true;
                        document.documentElement.style.display = 'none';
                        document.body.style.display = 'none';
                    }
                }
            }, 100);
            
            // Method 2: Console detection
            let consoleDetection = setInterval(function() {
                let before = Date.now();
                debugger;
                let after = Date.now();
                if (after - before > 100) {
                    document.documentElement.style.display = 'none';
                    document.body.style.display = 'none';
                    clearInterval(consoleDetection);
                }
            }, 1000);
            
            // Method 3: Function toString detection
            let element = new Image();
            Object.defineProperty(element, 'id', {
                get: function() {
                    document.documentElement.style.display = 'none';
                    document.body.style.display = 'none';
                }
            });
            setInterval(function() {
                console.log(element);
            }, 1000);
        },

        // Disable print functionality
        disablePrint: function() {
            window.addEventListener('beforeprint', function(e) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }, true);
            
            window.addEventListener('afterprint', function(e) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }, true);
            
            // Override print function
            window.print = function() {
                return false;
            };
        },

        // Disable browser zoom
        disableZoom: function() {
            document.addEventListener('wheel', function(e) {
                if (e.ctrlKey) {
                    e.preventDefault();
                    return false;
                }
            }, { passive: false });
            
            document.addEventListener('gesturestart', function(e) {
                e.preventDefault();
            });
            
            document.addEventListener('gesturechange', function(e) {
                e.preventDefault();
            });
            
            document.addEventListener('gestureend', function(e) {
                e.preventDefault();
            });
        },

        // Block suspicious extensions and add-ons
        blockExtensions: function() {
            // Detect common extension injection points
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes) {
                        mutation.addedNodes.forEach(function(node) {
                            if (node.nodeType === 1) { // Element node
                                // Check for extension-like attributes
                                const suspiciousAttrs = ['data-extension', 'chrome-extension', 'moz-extension', 'extension-'];
                                const hasExtensionAttr = suspiciousAttrs.some(attr => 
                                    node.getAttribute && node.getAttribute(attr)
                                );
                                
                                if (hasExtensionAttr || 
                                    (node.id && node.id.includes('extension')) ||
                                    (node.className && node.className.includes('extension'))) {
                                    node.remove();
                                }
                            }
                        });
                    }
                });
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true,
                attributes: true
            });
        },

        // Disable developer mode detection
        antiTamper: function() {
            // Check if page source is being accessed
            let sourceCheck = setInterval(function() {
                if (document.documentElement.innerHTML.includes('view-source:')) {
                    document.documentElement.innerHTML = '';
                    document.body.innerHTML = '';
                    clearInterval(sourceCheck);
                }
            }, 100);
            
            // Protect against script injection
            const originalCreateElement = document.createElement;
            document.createElement = function(tagName) {
                if (tagName.toLowerCase() === 'script') {
                    return null;
                }
                return originalCreateElement.apply(document, arguments);
            };
            
            // Protect against innerHTML modification
            Object.defineProperty(document.body, 'innerHTML', {
                set: function(value) {
                    if (value.includes('<script') || value.includes('javascript:')) {
                        return;
                    }
                },
                configurable: false
            });
        },

        // Ultimate stealth mode
        stealthMode: function() {
            // Hide from automation tools
            Object.defineProperty(navigator, 'webdriver', {
                get: () => false,
            });
            
            // Hide automation properties
            delete window.chrome;
            delete window.navigator.chrome;
            
            // Override automation detection
            window.navigator.permissions.query = () => Promise.resolve({state: 'granted'});
            
            // Block headless detection
            Object.defineProperty(navigator, 'languages', {
                get: () => ['en-US', 'en'],
            });
            
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5],
            });
        },

        // Initialize all protection methods
        init: function() {
            try {
                this.disableAllShortcuts();
                this.disableRightClick();
                this.disableSelection();
                this.disableConsole();
                this.hideBrowserTools();
                this.detectDevTools();
                this.disablePrint();
                this.disableZoom();
                this.blockExtensions();
                this.antiTamper();
                this.stealthMode();
                
                console.log('%c🔒 Ultimate Protection Activated', 'color: red; font-size: 20px; font-weight: bold;');
                
            } catch (error) {
                // Silent error handling
            }
        },

        // Continuous protection monitoring
        monitor: function() {
            setInterval(() => {
                if (!protectionActive) {
                    document.documentElement.style.display = 'none';
                    document.body.style.display = 'none';
                }
                
                // Re-disable console if it gets re-enabled
                if (typeof console !== 'undefined' && console.log.toString().includes('native')) {
                    this.disableConsole();
                }
                
                // Check for tamper attempts
                if (document.querySelectorAll('script[src*="extension"]').length > 0) {
                    document.querySelectorAll('script[src*="extension"]').forEach(script => script.remove());
                }
                
            }, 500);
        }
    };

    // Auto-initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            UltimateProtection.init();
            UltimateProtection.monitor();
        });
    } else {
        UltimateProtection.init();
        UltimateProtection.monitor();
    }

    // Immediate initialization
    UltimateProtection.init();
    UltimateProtection.monitor();

    // Export for manual control (if needed)
    window.UltimateProtection = UltimateProtection;

    // Final protection layer
    Object.freeze(UltimateProtection);
    
})();
